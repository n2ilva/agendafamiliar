import * as TaskManager from 'expo-task-manager';
import { Platform } from 'react-native';

const BACKGROUND_SYNC_TASK = 'background-sync-task';

// Background tasks n√£o est√£o dispon√≠veis no Expo Go.
// Para usar essa funcionalidade, √© necess√°rio criar um Development Build (Dev Client).
// Veja: https://docs.expo.dev/develop/development-builds/introduction/

async function isExpoGo(): Promise<boolean> {
  try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const Constants = require('expo-constants');
    return Constants?.appOwnership === 'expo';
  } catch {
    return false;
  }
}

// Define a tarefa de background (apenas funciona em Development Build, n√£o em Expo Go)
TaskManager.defineTask(BACKGROUND_SYNC_TASK, async () => {
  console.log('üîÑ Tarefa de sincroniza√ß√£o em segundo plano executada.');
  
  // Background sync n√£o dispon√≠vel no Expo Go
  if (Platform.OS === 'web' || await isExpoGo()) {
    console.log('‚ö†Ô∏è Background sync ignorado: n√£o dispon√≠vel no Expo Go ou Web.');
    return;
  }

  // Nota: Esta fun√ß√£o nunca ser√° executada no Expo Go
  // Ela s√≥ funciona em Development Build ou APK/IPA standalone
  console.log('‚úÖ Background sync conclu√≠do (Development Build).');
});

async function registerBackgroundSyncAsync() {
  if (Platform.OS === 'web' || await isExpoGo()) {
    console.log('‚ö†Ô∏è Background sync n√£o registrado: n√£o dispon√≠vel no Expo Go ou Web.');
    console.log('   Para usar background tasks, crie um Development Build.');
    return;
  }

  // Nota: Este c√≥digo nunca ser√° executado no Expo Go
  console.log('‚úÖ Background sync est√° dispon√≠vel em Development Build.');
}

async function unregisterBackgroundSyncAsync() {
  if (Platform.OS === 'web' || await isExpoGo()) {
    console.log('‚ö†Ô∏è Background sync n√£o precisa ser cancelado (n√£o est√° ativo).');
    return;
  }

  console.log('‚úÖ Background sync cancelado.');
}

export default {
  registerBackgroundSyncAsync,
  unregisterBackgroundSyncAsync,
};
