import * as TaskManager from 'expo-task-manager';
import * as BackgroundFetch from 'expo-background-fetch';
import { Platform } from 'react-native';

const BACKGROUND_SYNC_TASK = 'background-sync-task';

// Background tasks n√£o est√£o dispon√≠veis no Expo Go.
// Para usar essa funcionalidade, √© necess√°rio criar um Development Build (Dev Client).
// Veja: https://docs.expo.dev/develop/development-builds/introduction/

async function isExpoGo(): Promise<boolean> {
  try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const Constants = require('expo-constants');
    return Constants?.appOwnership === 'expo';
  } catch {
    return false;
  }
}

// Define a tarefa de background (funciona apenas em Development Build/Standalone, n√£o em Expo Go)
TaskManager.defineTask(BACKGROUND_SYNC_TASK, async () => {
  try {
    console.log('üîÑ [BG] Executando tarefa de sincroniza√ß√£o...');

    if (Platform.OS === 'web' || await isExpoGo()) {
      console.log('‚ö†Ô∏è [BG] Ignorado: n√£o dispon√≠vel no Expo Go ou Web.');
      return BackgroundFetch.BackgroundFetchResult.NoData;
    }

    // Import din√¢mico para reduzir custo de inicializa√ß√£o e evitar ciclos
    const { default: SyncService } = await import('./SyncService');

    const ok = await SyncService.performBackgroundSync();
    console.log(`‚úÖ [BG] Tarefa conclu√≠da. Altera√ß√µes: ${ok ? 'sim' : 'n√£o'}`);
    return ok
      ? BackgroundFetch.BackgroundFetchResult.NewData
      : BackgroundFetch.BackgroundFetchResult.NoData;
  } catch (e) {
    console.error('‚ùå [BG] Erro na tarefa de sincroniza√ß√£o:', e);
    return BackgroundFetch.BackgroundFetchResult.Failed;
  }
});

async function registerBackgroundSyncAsync() {
  if (Platform.OS === 'web' || await isExpoGo()) {
    console.log('‚ö†Ô∏è Background sync n√£o registrado: n√£o dispon√≠vel no Expo Go ou Web.');
    console.log('   Para usar background tasks, crie um Development Build.');
    return;
  }

  const status = await BackgroundFetch.getStatusAsync();
  if (status === BackgroundFetch.BackgroundFetchStatus.Restricted || status === BackgroundFetch.BackgroundFetchStatus.Denied) {
    console.warn('‚ö†Ô∏è Background Fetch desativado nas configura√ß√µes do sistema.');
    return;
  }

  const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_SYNC_TASK);
  if (!isRegistered) {
    try {
      await BackgroundFetch.registerTaskAsync(BACKGROUND_SYNC_TASK, {
        minimumInterval: 15 * 60, // 15 minutos (Android respeita; iOS √© oportunista)
        stopOnTerminate: false,   // Android: continuar ap√≥s fechamento
        startOnBoot: true         // Android: iniciar no boot
      });
      console.log('‚úÖ Background sync registrado.');
    } catch (e) {
      console.error('‚ùå Falha ao registrar background sync:', e);
    }
  } else {
    console.log('‚ÑπÔ∏è Background sync j√° estava registrado.');
  }
}

async function unregisterBackgroundSyncAsync() {
  if (Platform.OS === 'web' || await isExpoGo()) {
    console.log('‚ö†Ô∏è Background sync n√£o precisa ser cancelado (n√£o est√° ativo).');
    return;
  }

  try {
    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_SYNC_TASK);
    if (isRegistered) {
      await BackgroundFetch.unregisterTaskAsync(BACKGROUND_SYNC_TASK);
      console.log('‚úÖ Background sync cancelado.');
    }
  } catch (e) {
    console.error('‚ùå Falha ao cancelar background sync:', e);
  }
}

export default {
  registerBackgroundSyncAsync,
  unregisterBackgroundSyncAsync,
};
